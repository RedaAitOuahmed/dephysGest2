swagger: "2.0"
info:
  description: "This is DephysGest a CRM API owned by DephysTech."
  version: "1.0.0"
  title: "DephysGest"
  contact:
    email: "david@dephysgest.com"
host: "dephysgest.dephystech.com"
basePath: "/"
tags:
- name: "contacts"
  description: "Everything about all types of contacts"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"
- name: "taches"
  description: "Everything about tasks"
- name: "projets"
  description: "Used to classify tasks (Les Taches)"
- name: "fichiers"
  description: "are uploaded to tasks (Les Taches)"
schemes:
- "http"
paths:
  /projets:
      post:
        tags:
        - "projets"
        summary: "Add a new projet"
        description: ""
        operationId: "addprojet"
        consumes:
        - "application/json"
        produces:
        - "application/json"
        parameters:
        - in: "body"
          name: "projet"
          description: "projet object that needs to be added to the database"
          required: true
          schema:
            $ref: "#/definitions/Projet"
        responses:
          405:
            description: "Invalid input"
          200:
            description: "projet added successfully"
      get:
        tags:
        - "projets"
        summary: "get All projets"
        description: ""
        operationId: "getAllprojets"
        produces:
        - "application/json"
        responses:
          200:
            description : "Succeded Operation"
            schema:
              type: "array"
              items:
                $ref: "#/definitions/Projet"
          404:
            description: "No projet found"
  /projets/{projetId}:
      put:
        tags:
        - "projets"
        summary: "Update an existing projet"
        description: ""
        operationId: "updateprojet"
        consumes:
        - "application/x-www-form-urlencoded"
        produces:
        - "application/json"
        parameters:
        - in: "body"
          name: "projet"
          description: " New projet data to be updated"
          required: true
          schema:
            $ref: "#/definitions/Projet"
        - in: "path"
          name: "projetId"
          type: "integer"
          required: true
        responses:
          400:
            description: "Invalid ID supplied"
          404:
            description: "Contact not found"
          405:
            description: "Validation exception"
      get:
        tags:
        - "projets"
        summary: "get an existing projet by id"
        description: ""
        operationId: "getprojet"
        produces:
        - "application/json"
        parameters:
        - in: "path"
          name: "projetId"
          type: "integer"
          required: true
          
        responses:
          200:
            description : "Succeded Operation"
            schema :
              $ref : "#/definitions/Projet"
          400:
            description: "Invalid ID supplied"
          404:
            description: "projet not found"
          405:
            description: "Validation exception"
      delete:
        tags:
        - "projets"
        summary: "Deletes a projet"
        description: ""
        operationId: "deleteprojet"
        produces:
        - "application/json"
        parameters:
        - in: "path"
          name: "projetId"
          type: "integer"
          required: true
        responses:
          200:
            description: "projet Deleted"
          400:
            description: "Invalid ID supplied"
          404:
            description: "projet not found"
  /fichiers:
      get:
        tags:
        - "fichiers"
        summary: "get All fichiers"
        description: ""
        operationId: "getAllfichiers"
        produces:
        - "application/json"
        responses:
          200:
            description : "Succeded Operation"
            schema:
              type: "array"
              items:
                $ref: "#/definitions/Fichier"
          404:
            description: "No fichier found"
  /fichiers/{fichierId}:
      put:
        tags:
        - "fichiers"
        summary: "Update an existing fichier"
        description: ""
        operationId: "updatefichier"
        consumes:
        - "application/x-www-form-urlencoded"
        produces:
        - "application/json"
        parameters:
        - in: "formData"
          name: "fichierObject"
          description: " New fichier data to be updated"
          required: true
          schema:
            $ref: "#/definitions/Fichier"
        - in: "path"
          name: "fichierId"
          type: "integer"
          required: true
        - in: "formData"
          name: "fichier"
          type: "file"
          required: false
        responses:
          400:
            description: "Invalid ID supplied"
          404:
            description: "Fichier not found"
          405:
            description: "Validation exception"
      get:
        tags:
        - "fichiers"
        summary: "get an existing fichier by id"
        description: ""
        operationId: "getfichier"
        produces:
        - "application/json"
        parameters:
        - in: "path"
          name: "fichierId"
          type: "integer"
          required: true
          
        responses:
          200:
            description : "Succeded Operation"
            schema :
              $ref : "#/definitions/Fichier"
          400:
            description: "Invalid ID supplied"
          404:
            description: "fichier not found"
          405:
            description: "Validation exception"
      delete:
        tags:
        - "fichiers"
        summary: "Deletes a fichier"
        description: ""
        operationId: "deletefichier"
        produces:
        - "application/json"
        parameters:
        - in: "path"
          name: "fichierId"
          type: "integer"
          required: true
        responses:
          200:
            description: "fichier Deleted"
          400:
            description: "Invalid ID supplied"
          404:
            description: "fichier not found"
  /taches:
      post:
        tags:
        - "taches"
        summary: "Add a new tache"
        description: ""
        operationId: "addTache"
        consumes:
        - "application/json"
        produces:
        - "application/json"
        parameters:
        - in: "body"
          name: "tache"
          description: "Tache object that needs to be added to the database"
          required: true
          schema:
            $ref: "#/definitions/Tache"
        responses:
          405:
            description: "Invalid input"
          200:
            description: "Tache added successfully"
      get:
        tags:
        - "taches"
        summary: "get All Taches that are visible to the user making this request"
        description: ""
        operationId: "getAllTaches"
        produces:
        - "application/json"
        responses:
          200:
            description : "Succeded Operation"
            schema:
              type: "array"
              items:
                $ref: "#/definitions/Tache"
          404:
            description: "No Tache found"
  /taches/{tacheId}:
      put:
        tags:
        - "taches"
        summary: "Update an existing tache"
        description: ""
        operationId: "updateTache"
        consumes:
        - "application/x-www-form-urlencoded"
        produces:
        - "application/json"
        parameters:
        - in: "body"
          name: "tache"
          description: " New Tache data to be updated"
          required: true
          schema:
            $ref: "#/definitions/Tache"
        - in: "path"
          name: "tacheId"
          type: "integer"
          required: true
        responses:
          400:
            description: "Invalid ID supplied"
          404:
            description: "Contact not found"
          405:
            description: "Validation exception"
      get:
        tags:
        - "taches"
        summary: "get an existing tache by id"
        description: ""
        operationId: "getTache"
        produces:
        - "application/json"
        parameters:
        - in: "path"
          name: "tacheId"
          type: "integer"
          required: true
          
        responses:
          200:
            description : "Succeded Operation"
            schema :
              $ref : "#/definitions/Tache"
          400:
            description: "Invalid ID supplied"
          404:
            description: "Tache not found"
          405:
            description: "Validation exception"
      delete:
        tags:
        - "taches"
        summary: "Deletes a tache"
        description: ""
        operationId: "deleteTache"
        produces:
        - "application/json"
        parameters:
        - in: "path"
          name: "tacheId"
          type: "integer"
          required: true
        responses:
          200:
            description: "Tache Deleted"
          400:
            description: "Invalid ID supplied"
          404:
            description: "Tache not found"
  /taches_projet/{projetId}:
    get:
      tags:
      - "taches"
      summary: "get all 'taches' of a 'projet'"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
      - in: "path"
        name: "projetId"
        type: "integer"
        required: true
      responses:
        200:
          description : "Succeded Operation, returning all 'tache' of the 'projet' "
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Tache"
        404:
          description: "No Tache found for this projet"
    delete:
      tags:
      - "taches"
      summary: "delete all 'taches' of a 'projet'"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
      - in: "path"
        name: "projetId"
        type: "integer"
        required: true
      responses:
        200:
          description : "Succeded Operation, deleting all 'tache' of the 'projet' "
        404:
          description: "No Tache found for this projet"
  /taches/filterByProjetAndVisibilityAndAssignation:
    get:
      tags:
      - "taches"
      summary: "filter taches by projet, visibility, and assignation"
      description: "Projet : Multiple projet values can be provided with comma separated strings, a logical OR operation will be performed to return the results. Visibility : public or perso. Assignation : taches that the user assigned or taches assigned to the user, or all taches."
      operationId: "filterTachesByProjet_Visibility_Assignation"
      consumes:
      - 'application/json'
      produces:
      - "application/json"
      parameters:
      - name: "visibility"
        in: "query"
        type: "string"
        enum:
        - "perso"
        - "public"
      - name: "assignation"
        in: "query"
        type: "string"
        enum:
        - "all"
        - "userAssigned"
        - "assignedToUser"
      - name: "projetIds"
        in: "query"
        required: true
        type: "array"
        items:
          type: "integer"

      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Contact"
        400:
          description: "Invalid types and relations values"    
  
  /fichiers/tache:
      post:
        tags:
        - "fichiers"
        summary: "upload a new fichier to a tache"
        description: ""
        operationId: "addFichier"
        consumes:
        - "multipart/form-data"
        - "application/json"
        produces:
        - "application/json"
        parameters:
        - name: "fichierObject"
          in: "formData"
          description: "fichier object that needs to be added to the database"
          required: true
          schema:
            $ref: "#/definitions/Fichier"
        - name: "file"
          in: "formData"
          description: "file to upload"
          required: true
          type: "file"
        responses:
          405:
            description: "Invalid input"
          200:
            description: "Fichier uploaded successfully"
  /fichiers/tache/{tacheId}:
      get:
        tags:
        - "fichiers"
        summary: "get All Fichiers related to this tache"
        description: ""
        operationId: "getAllFichiers"
        produces:
        - "application/json"
        parameters:
        - in : "path"
          name : "tacheId"
          required: true
          type : "integer"
        responses:
          200:
            description : "Succeded Operation"
            schema:
              type: "array"
              items:
                $ref: "#/definitions/Fichier"
          404:
            description: "No Tache found"


  /contacts:
      post:
        tags:
        - "contacts"
        summary: "Add a new contact"
        description: ""
        operationId: "addContact"
        consumes:
        - "application/json"
        produces:
        - "application/json"
        parameters:
        - in: "body"
          name: "contact"
          description: "Contact object that needs to be added to the database"
          required: true
          schema:
            $ref: "#/definitions/Contact"
        responses:
          405:
            description: "No user logged in"
          200:
            description: "Contact added successfully"
      get:
        tags:
        - "contacts"
        summary: "get All contacts"
        description: ""
        operationId: "getAllContacts"
        produces:
        - "application/json"
        responses:
          200:
            description : "Succeded Operation"
            schema:
              type: "array"
              items:
                $ref: "#/definitions/Contact"
          404:
            description: "No Contact found"

  /contacts/filterByTypeAndRelation:
    get:
      tags:
      - "contacts"
      summary: "filter contacts by type and/or by relation"
      description: "Multiple type and relation values can be provided with comma separated strings, a logical OR operation will be performed to return the results"
      operationId: "filterContactsByType"
      produces:
      - "application/json"
      parameters:
      - name: "relations"
        in: "query"
        required: true
        type: "array"
        items:
          type: "string"
          enum:
            - "client"
            - "fournisseur"
            - "prospect"
            - "collegue"
      - name: "types"
        in: "query"
        required: true
        type: "array"
        items:
          type: "string"
          enum:
          - 'Undefined'
          - 'Entreprise'
          - 'Personne'
          - 'User'
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Contact"
        400:
          description: "Invalid types and relations values"
  /contacts/workingAt/{companyContactId}:
    get:
      tags:
      - "contacts"
      summary: "get the contacts of the people working at a company"
      description: ""
      operationId: "contactsWorkingAt"
      produces:
      - "application/json"
      parameters:
      - name: "companyContactId"
        in: "path"
        required: true
        type: "integer"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Contact"
        400:
          description: "Invalid company contact id values"
        404:
          description: "Company not found"
  /contacts/{contactId}:
      put:
        tags:
        - "contacts"
        summary: "Update an existing contact"
        description: ""
        operationId: "updateContact"
        consumes:
        - "application/x-www-form-urlencoded"
        produces:
        - "application/json"
        parameters:
        - in: "body"
          name: "contact"
          description: " New Contact object data to be updated"
          required: true
          schema:
            $ref: "#/definitions/Contact"
        - in: "path"
          name: "contactId"
          type: "integer"
          required: true
        responses:
          400:
            description: "Invalid ID supplied"
          404:
            description: "Contact not found"
          405:
            description: "Validation exception"
      get:
        tags:
        - "contacts"
        summary: "get a contact by id"
        description: ""
        operationId: "getContact"
        produces:
        - "application/json"
        parameters:
        - in: "path"
          name: "contactId"
          type: "integer"
          required: true
          
        responses:
          200:
            description : "Succeded Operation"
            schema :
              $ref : "#/definitions/Contact"
          400:
            description: "Invalid ID supplied"
          404:
            description: "Contact not found"
          405:
            description: "Validation exception"
      delete:
        tags:
        - "contacts"
        summary: "Deletes a contact"
        description: ""
        operationId: "deleteContact"
        produces:
        - "application/json"
        parameters:
        - in: "path"
          name: "contactId"
          type: "integer"
          required: true
        responses:
          200:
            description: "Contact Deleted"
          400:
            description: "Invalid ID supplied"
          404:
            description: "Contact not found"
          
    
definitions:
        
  Relations:
        type: "array"
        items:
          type: "string"
          enum:
            - "client"
            - "fournisseur"
            - "prospect"
            - "collegue"
  Type:
        type: "string"
        enum:
        - 'Undefined'
        - 'Entreprise'
        - 'Personne'
        - 'User'
  Contact:
    type: "object"
    properties:
      id:
        type: "integer"
      type:
        $ref : '#/definitions/Type'
      nom:
        type: "string"
      relation:
        $ref: '#/definitions/Relations'
      email:
        type: "string"
      tel:
        type: "string"
      adresse:
        type: "string"
      fax:
        type : "string"
      addedBy:
        type: "string"
        description: "link to the user who added this contact"
      EntrepriseData:
        $ref: '#/definitions/Entreprise'
      PersonneData:
        $ref: '#/definitions/Personne' 
      
  Personne:
    type: "object"
    properties:
      prenom:
        type : 'string'
  Entreprise:
    type: "object"
    properties:
      siren:
        type: 'string'
      siret:
        type : 'string'
      assujettiTVA:
        type : boolean
      numTVA :
        type : boolean
  Projet:
    type: "object"
    description: "used to classify tasks"
    properties:
      id:
        type: "integer"
      nom:
        type: 'string'
      description:
        type : 'string'
      addedBy:
        type: "string"
        description: "link to the user who added this project"
  Tache:
    type: "object"
    properties:
      id:
        type: 'integer'
      nom:
        type : 'string'
      description:
        type : 'string'
      visibleAuxAutres:
        type : 'boolean'
      dateLimite:
        type: 'string'
      etat:
        type: 'string'
      projetId:
        type: "integer"
      addedBy:
        type: "integer"
        description: "id of the user who added this project"
  Fichier:
    type: "object"
    properties:
      id:
        type: 'integer'
      nom:
        type : 'string'
      chemin:
        type : 'string'
      addedBy:
        type: "integer"
        description: "id of the user who added this file"
      tache_id:
        type: 'integer'
        
          