swagger: "2.0"
info:
  description: "This is DephysGest a CRM API owned by DephysTech."
  version: "1.0.0"
  title: "DephysGest"
  contact:
    email: "david@dephysgest.com"
host: "http://127.0.0.1:8000/api"
basePath: "/"
tags:
- name: "contacts"
  description: "Everything about all types of contacts"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"
- name: "taches"
  description: "Everything about tasks"
- name: "projets"
  description: "Used to classify tasks (Les Taches)"
- name: "fichiers"
  description: "are uploaded to tasks (Les Taches)"
schemes:
- "http"
paths:
  /projets:
      post:
        tags:
        - "projets"
        summary: "Add a new projet"
        description: ""
        operationId: "addprojet"
        consumes:
        - "application/json"
        produces:
        - "application/json"
        parameters:
        - in: "form-data"
          name: "nom"
          required: true
          type: "string"
        - in: 'form-data'
          name: "description"
          type: 'string'
        responses:
          422:
            description: "Invalid input"
          200:
            description: "projet added successfully"
          500:
            description: "Internal Server Error"
      get:
        tags:
        - "projets"
        summary: "get All projets"
        description: ""
        operationId: "getAllprojets"
        produces:
        - "application/json"
        responses:
          200:
            description : "Succeded Operation"
            schema:
              type: "array"
              items:
                $ref: "#/definitions/Projet"
          404:
            description: "No projet found"
  /projets/{projetId}:
      put:
        tags:
        - "projets"
        summary: "Update an existing projet"
        description: ""
        operationId: "updateprojet"
        consumes:
        - "application/x-www-form-urlencoded"
        produces:
        - "application/json"
        parameters:
        - in: "body"
          name: "projet"
          description: " New projet data to be updated"
          required: true
          schema:
            $ref: "#/definitions/Projet"
        - in: "path"
          name: "projetId"
          type: "integer"
          required: true
        responses:
          200:
            description: "projet updated succefully"
          405:
            description: "Invalid Operation : only a super user and the user who created this project can edit it"
          404:
            description: "Projet not found"
          500:
            description: "Internal Server Error"
      get:
        tags:
        - "projets"
        summary: "get an existing projet by id"
        description: ""
        operationId: "getprojet"
        produces:
        - "application/json"
        parameters:
        - in: "path"
          name: "projetId"
          type: "integer"
          required: true
          
        responses:
          200:
            description : "Succeded Operation"
            schema :
              $ref : "#/definitions/Projet"
          400:
            description: "Invalid ID supplied"
          404:
            description: "projet not found"
          405:
            description: "Validation exception"
      delete:
        tags:
        - "projets"
        summary: "Deletes a projet"
        description: "when a projet is deleted, all its Taches are attributed to the default projet : Libre"
        operationId: "deleteprojet"
        produces:
        - "application/json"
        parameters:
        - in: "path"
          name: "projetId"
          type: "integer"
          required: true
        responses:
          200:
            description: "projet Deleted"
          400:
            description: 'Invalid ID : default projet cant be deleted'
          404:
            description: "projet not found"
          405:
            description: "Invalid Operation : only a super user and the user who created this project can delete it"
          500:
            description: "Internal server Error"
  /fichiers:
      get:
        tags:
        - "fichiers"
        summary: "get All fichiers visible to the user"
        description: ""
        produces:
        - "application/json"
        responses:
          200:
            description : "Succeded Operation"
            schema:
              type: "array"
              items:
                $ref: "#/definitions/Fichier"
      post:
        tags:
        - "fichiers"
        summary: "uploads a file and create a Fichier instance"
        description: ""
        consumes:
        - "application/form-data"
        produces:
        - "application/json"
        parameters:
        - in: "formData"
          name: "nom"
          description: "name of the file that will be displayed to the user"
          type: "string"
          required: true
        - in: "formData"
          name: "tache_id"
          description: "id of the tache that this file should bet attached to"
          type: "string"
          required: true
        - in: "formData"
          name: "file"
          type: "file"
          required: true
        responses:
          200:
            description : "Succeded Operation"
            schema:
              type: "array"
              items:
                $ref: "#/definitions/Fichier"
          422:
            description: "Validation exception"
          500:
            description: "internal server error"
  /fichiers/update/{id}:
      post:
        tags:
        - "fichiers"
        summary: "Update an existing fichier"
        description: "Only the user who added the file can access this method"
        consumes:
        - "application/form-data"
        produces:
        - "application/json"
        parameters:
        - in: "formData"
          name: "nom"
          description: "name of the file that will be displayed to the user"
          type: "string"
        - in: "formData"
          name: "tache_id"
          description: "id of the tache that this file should bet attached to"
          type: "string"
        - in: "path"
          name: "id"
          type: "integer"
          required: true
        - in: "formData"
          name: "file"
          type: "file"
          required: false
        responses:
          200:
            description: "fichier updated succefully"
          405:
            description: "Invalid Operation : a fichier can be edited only by the user who added it"
          404:
            description: "Fichier not found"
          422:
            description: "Validation exception"
          500:
            description: "internal server error"
  /fichiers/{id}:
      get:
        tags:
        - "fichiers"
        summary: "get an existing fichier by id"
        description: ""
        operationId: "getfichier"
        produces:
        - "application/json"
        parameters:
        - in: "path"
          name: "id"
          type: "integer"
          required: true
          
        responses:
          200:
            description : "Succeded Operation"
            schema :
              $ref : "#/definitions/Fichier"
          404:
            description: "fichier not found"
          405:
            description: "Invalid Operation : this fichier belongs to another user and to a tache that is not visible by this user"
      delete:
        tags:
        - "fichiers"
        summary: "Deletes a fichier"
        description: "only the user who added the file and the super user can delete it."
        produces:
        - "application/json"
        parameters:
        - in: "path"
          name: "fichierId"
          type: "integer"
          required: true
        responses:
          200:
            description: "fichier deleted succefully"
          404:
            description: "fichier not found"
          405:
            description: "Invalid Operation : a fichier can be deleted only by the user who added it or a super user"
          500:
            description: "internal server error"
  
  /fichiers/tache/{id}:
      get:
        tags:
        - "fichiers"
        summary: "get All Fichiers related to this tache"
        description: ""
        operationId: "getAllFichiers"
        produces:
        - "application/json"
        parameters:
        - in : "path"
          name : "tacheId"
          required: true
          type : "integer"
        responses:
          200:
            description : "Succeded Operation"
            schema:
              type: "array"
              items:
                $ref: "#/definitions/Fichier"
          404:
            description: "No Tache found"
          405:
            description: "Invalid operation : this Tache can't be seen by this user"
  /fichiers/download/{id}:
      get:
        tags:
        - "fichiers"
        summary: "downloads file of this Fichier"
        description: ""
        produces:
        - "application/json"
        parameters:
        - in : "path"
          name : "id"
          required: true
          type : "integer"
        responses:
          200:
            description : "Succeded Operation"
            schema:
              type: "file"
          404:
            description: "fichier not found"
          405:
            description: "Invalid Operation : this fichier belongs to another user and to a tache that is not visible by this user"
  /fichiers/search:  
    post:
        tags:
        - "fichiers"
        summary: "Update an existing fichier"
        description: "Only the user who added the file can access this method"
        consumes:
        - "application/form-data"
        produces:
        - "application/json"
        parameters:
        - in: "formData"
          name: "nom"
          type: "string"
        - in: "formData"
          name: "startDate"
          type: "date"
        - in: "formData"
          name: "endDate"
          type: "date"
        responses:
          200:
            description: "Succeded operation"
            schema:
              type: "array"
              items:
                $ref: "#/definitions/Fichier"

  
  /taches:
      get:
        tags:
        - "taches"
        summary: "get All Taches that are visible to the user making this request"
        description: ""
        operationId: "getAllTaches"
        produces:
        - "application/json"
        responses:
          200:
            description : "Succeded Operation"
            schema:
              type: "array"
              items:
                $ref: "#/definitions/Tache"
          404:
            description: "No Tache found"
  /taches/{tacheId}:
      put:
        tags:
        - "taches"
        summary: "Update an existing tache"
        description: "The Tache can be updated either by the user who created
         it or by an assigned-to user"
        operationId: "updateTache"
        consumes:
        - "application/x-www-form-urlencoded"
        produces:
        - "application/json"
        parameters:
        - in: "body"
          name: "tache"
          description: " New Tache data to be updated"
          required: true
          schema:
            $ref: "#/definitions/Tache"
        - in: "path"
          name: "tacheId"
          type: "integer"
          required: true
        responses:
          400:
            description: "Invalid ID supplied"
          404:
            description: "Tache not found"
          405:
            description: "Invalid Operation : this Tache can't be edited by this user, as it's not assigned to him nor he was he the one who created it neither is he a super user"
      get:
        tags:
        - "taches"
        summary: "get an existing tache by id"
        description: ""
        operationId: "getTache"
        produces:
        - "application/json"
        parameters:
        - in: "path"
          name: "tacheId"
          type: "integer"
          required: true
          
        responses:
          200:
            description : "Succeded Operation"
            schema :
              $ref : "#/definitions/Tache"
          404:
            description: "Tache not found"
          405:
            description: "This Tache can't be seen by this user"
      delete:
        tags:
        - "taches"
        summary: "Deletes a tache"
        description: ""
        operationId: "deleteTache"
        produces:
        - "application/json"
        parameters:
        - in: "path"
          name: "tacheId"
          type: "integer"
          required: true
        responses:
          200:
            description: "Tache Deleted"
          405:
            description: "Invalid Operation : only a super user or the user who created this tache can delete it"
          404:
            description: "Tache not found"
  /taches/projet/{projetId}:
    get:
      tags:
      - "taches"
      summary: "get all 'taches' of a 'projet'"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
      - in: "path"
        name: "projetId"
        type: "integer"
        required: true
      responses:
        200:
          description : "Succeded Operation, returning all 'tache' of the 'projet' "
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Tache"
        404:
          description: "No Tache found for this projet"
    delete:
      tags:
      - "taches"
      summary: "superUser deletes all 'taches' of a 'projet'"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
      - in: "path"
        name: "projetId"
        type: "integer"
        required: true
      responses:
        200:
          description : "Succeded Operation, all 'tache' of the 'projet' were deleted"
        404:
          description: "No projet with id = $id found"
        405:
          description: "Invalid Operation : this user is not a super user, only a super user can perform this action"
        500:
          description: "Internal Server Error"
        501:
          description: "No taches to delete"
  /taches/filterByProjetAndVisibilityAndAssignation:
    post:
      tags:
      - "taches"
      summary: "filter taches by projet, visibility, and assignation"
      description: "Projet : Multiple projet values can be provided with comma separated strings, a logical OR operation will be performed to return the results. Visibility : public or perso. Assignation : taches that the user assigned or taches assigned to the user, or all taches.a logical AND operation will be performed between the 3 filters"
      operationId: "filterTachesByProjet_Visibility_Assignation"
      consumes:
      - 'application/json'
      produces:
      - "application/json"
      parameters:
      - name: "visibility"
        in: "form-data"
        type: "string"
        enum:
        - "perso"
        - "public"
      - name: "assignation"
        in: "form-data"
        type: "string"
        enum:
        - "userAssigned"
        - "assignedToUser"
      - name: "projetIds"
        in: "form-data"
        type: "array"
        items:
          type: "integer"

      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Contact"
        422:
          description: "The given data was invalid"    
  
  

  /contacts:
      post:
        tags:
        - "contacts"
        summary: "Add a new contact"
        description: ""
        operationId: "addContact"
        consumes:
        - "application/json"
        produces:
        - "application/json"
        parameters:
        - in: "body"
          name: "contact"
          description: "Contact object that needs to be added to the database"
          required: true
          schema:
            $ref: "#/definitions/Contact"
        responses:
          500:
            description: "Server internal error"
          200:
            description: "Contact added successfully"
      get:
        tags:
        - "contacts"
        summary: "get All contacts"
        description: ""
        operationId: "getAllContacts"
        produces:
        - "application/json"
        responses:
          200:
            description : "Succeded Operation"
            schema:
              type: "array"
              items:
                $ref: "#/definitions/Contact"
          404:
            description: "No Contact found"

  /contacts/filterByTypeAndRelation:
    get:
      tags:
      - "contacts"
      summary: "filter contacts by type and by relation"
      description: "Multiple type and relation values can be provided with comma separated strings, a logical OR operation will be performed between the various values of each filter, and then the intersection of the two results is returned"
      operationId: "filterContactsByTypeAndRelation"
      produces:
      - "application/json"
      parameters:
      - name: "relations"
        in: "query"
        required: true
        type: "array"
        items:
          type: "string"
          enum:
            - "client"
            - "fournisseur"
            - "prospect"
            - "collegue"
      - name: "types"
        in: "query"
        required: true
        type: "array"
        items:
          type: "string"
          enum:
          - 'Undefined'
          - 'Entreprise'
          - 'Personne'
          - 'User'
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Contact"
        400:
          description: "Invalid type/relation value : 'The_value' "
  /contacts/workingAt/{companyContactId}:
    get:
      tags:
      - "contacts"
      summary: "get the contacts of the people working at a company"
      description: ""
      operationId: "contactsWorkingAt"
      produces:
      - "application/json"
      parameters:
      - name: "companyContactId"
        in: "path"
        required: true
        type: "integer"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Contact"
        400:
          description: "Invalid company contact id values"
        404:
          description: "Company not found"
  /contacts/{contactId}:
      put:
        tags:
        - "contacts"
        summary: "Update an existing contact"
        description: ""
        operationId: "updateContact"
        consumes:
        - "application/x-www-form-urlencoded"
        produces:
        - "application/json"
        parameters:
        - in: "body"
          name: "contact"
          description: " New Contact object data to be updated"
          required: true
          schema:
            $ref: "#/definitions/Contact"
        - in: "path"
          name: "contactId"
          type: "integer"
          required: true
        responses:
          400:
            description: "Invalid Operation : can't cast User type to Entrerpise type"
          404:
            description: "Contact not found"
          500:
            description: "Server Internal Error"
          407:
            description: "Warning old contactable instance couldn't be delted"
          410:
            description: "Invalid Operation : Contact can be edited only by a super user or by the user who added this contact"
      get:
        tags:
        - "contacts"
        summary: "get a contact by id"
        description: ""
        operationId: "getContact"
        produces:
        - "application/json"
        parameters:
        - in: "path"
          name: "contactId"
          type: "integer"
          required: true
          
        responses:
          200:
            description : "Succeded Operation"
            schema :
              $ref : "#/definitions/Contact"
          400:
            description: "Invalid ID supplied"
          404:
            description: "Contact not found"
          405:
            description: "Validation exception"
      delete:
        tags:
        - "contacts"
        summary: "Deletes a contact"
        description: ""
        operationId: "deleteContact"
        produces:
        - "application/json"
        parameters:
        - in: "path"
          name: "contactId"
          type: "integer"
          required: true
        responses:
          200:
            description: "Contact Deleted"
          404:
            description: "Contact not found"
          410:
            description: "Invalid Operation : can be deleted only by a super user or by the user who added this contact"
          
    
definitions:
        
  Relations:
        type: "array"
        items:
          type: "string"
          enum:
            - "client"
            - "fournisseur"
            - "prospect"
            - "collegue"
  Type:
        type: "string"
        enum:
        - 'Undefined'
        - 'Entreprise'
        - 'Personne'
        - 'User'
  Contact:
    type: "object"
    properties:
      id:
        type: "integer"
        description: "wouldn't be taken in consideration in a post or put request"
      type:
        $ref : '#/definitions/Type'
      nom:
        type: "string"
      relation:
        $ref: '#/definitions/Relations'
      email:
        type: "string"
      tel:
        type: "string"
      adresse:
        type: "string"
      fax:
        type : "string"
      addedBy:
        type: "integer"
        description: "ContactId of the user who added this contact"
      createdAt:
        type: "date"
        description: "this field is handled automaticly, so it wouldn't be taken in consideration in a post or put request"
      updatedAt:
        type: "date"
        description: "this field is handled automaticly, so it wouldn't be taken in consideration in a post or put request"
      siren:
        type: 'string'
        description: "in case it's an Entreprise"
      siret:
        type : 'string'
        description: "in case it's an Entreprise"
      assujettiTVA:
        type : boolean
        description: "in case it's an Entreprise"
      numTVA :
        type : boolean
        description: "in case it's an Entreprise"
      prenom:
        type: 'string'
        description : "in case it's a Personne " 
  Projet:
    type: "object"
    description: "used to classify tasks"
    properties:
      id:
        type: "integer"
      nom:
        type: 'string'
      description:
        type : 'string'
      addedBy:
        type: "string"
        description: "Contact id of the user who added this project"
  Tache:
    type: "object"
    properties:
      id:
        type: 'integer'
      nom:
        type : 'string'
      description:
        type : 'string'
      visibleAuxAutres:
        type : 'boolean'
      dateLimite:
        type: 'string'
      etat:
        type: 'string'
        enum:
          - 'aFaire'
          - 'enCours'
          - 'Faite'
      projetId:
        type: "integer"
      addedBy:
        type: "integer"
        description: "Contact id  of the user who added this project"
      assignedTo:
        description: "array containing contact ids of the users that this tache is assigned to"
        type: "array"
        items:
          type: 'integer'
        
  Fichier:
    type: "object"
    properties:
      id:
        type: 'integer'
      nom:
        type : 'string'
      taille:
        type : 'string'
        description: 'file size in bytes'
      addedBy:
        type: "integer"
        description: "Contact id of the user who added this file"
      tache_id:
        type: 'integer'
      created_at:
        type: 'timestamp'
      updated_at:
        type: 'timestamp'
      
        
          